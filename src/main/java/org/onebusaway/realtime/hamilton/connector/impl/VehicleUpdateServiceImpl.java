package org.onebusaway.realtime.hamilton.connector.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.TimeUnit;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.map.AnnotationIntrospector;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.xc.JaxbAnnotationIntrospector;
import org.onebusaway.realtime.hamilton.connector.VehicleMessage;
import org.onebusaway.realtime.hamilton.connector.service.VehicleUpdateService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;

public class VehicleUpdateServiceImpl implements VehicleUpdateService {

  private static final Logger _log = LoggerFactory.getLogger(VehicleUpdateServiceImpl.class);

  private static final String TCIP_KEY = "tcip";
  
  protected ObjectMapper _mapper = new ObjectMapper();
  
  private Cache<String, VehicleMessage> _cache;

  private int _timeout = 5; // minutes
  
  public VehicleUpdateServiceImpl() {
    /*
     * Use JAXB annotation interceptor so we pick up autogenerated annotations
     * from XSDs
     */
    final AnnotationIntrospector jaxb = new JaxbAnnotationIntrospector();
    _mapper.getDeserializationConfig().setAnnotationIntrospector(jaxb);
    _cache = CacheBuilder.newBuilder().expireAfterWrite(_timeout, TimeUnit.MINUTES).build();
  }
  
  public void receiveTCIP(byte[] buff) {
    VehicleMessage vm = null;
    try {
      final JsonNode message = _mapper.readValue(buff, JsonNode.class);
      final String vehicleMessageStr = message.get(TCIP_KEY).toString();
      vm = _mapper.readValue(vehicleMessageStr, VehicleMessage.class);
      if (vm != null) {
        put(vm);
      }
    } catch (Exception e) {
      _log.error("unexpected message=" + buff, e);
    }
  }

  private void put(VehicleMessage vm) {
    if (vm.getId() != null) {
      _cache.put(vm.getId(), vm);
    }
  }

  public List<VehicleMessage> getRecentMessages() {
    List<VehicleMessage> vehicles = new ArrayList<VehicleMessage>();
    Map<String,VehicleMessage> map = _cache.asMap();
    for (Entry<String, VehicleMessage> vm: map.entrySet()) {
      vehicles.add(vm.getValue());
    }
    return vehicles;
  }

}
